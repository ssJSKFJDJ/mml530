		mml2mid用の実験的プリプロセッサ v1.02

						nide@ics.nara-wu.ac.jp

  本品は、perl言語で書かれたmml2mid用のプリプロセッサです。使用にはperl
(文字列に日本語を使っているMMLファイルを処理する場合にはjperl)が必要です。
  今のところ、実現できているのは長い名前のマクロ・引数つきマクロだけです。
mml2mid本体で実現するには大幅な改造が必要なので、実験的にプリプロセッサ
で実現してみました。
  基本的な使い方は、長い名前の/引数つきのマクロを使ったMMLファイルをa.mml
として

	jperl mmlpp.pl a.mml > b.mml

とすると、マクロを展開してmml2midで処理できるようになったMMLファイルが
b.mmlに入りますので、それをmml2midで処理する、といった具合です。(詳しく
は2章)
  v1.02では、メモル(吉村隆則)さんによるピッチベンド値計算機能が付加され
ました(ありがとうございます)。これについて詳しくは、メモルさんによる
mmlppbnd.txtを参照して下さい。

  入力ファイル全体をメモリに読み込んで処理するので、DOSで使う場合はgo32
版perlなど、多量のメモリを使える版のperlを使って下さい。リアルモード版で
は実用にはならないと思います。
  また、複雑な正規表現などでメモリをどんどん食う(と思う)ので、Windowsの
ような不安定なシステムでちゃんと動作しなくても責任は負えません(UNIX上の
perl5以外では十分な動作確認をしていません)。
  perlは別途入手して下さい。perl5以上を推奨します。現在の版はperl4.036で
も一応動くように作ったつもりではありますが、作者の開発環境はperl5に移行
しているので、将来の版はperl5でしか正常動作しなくなるかも知れません。


【1】mmlpp.plで許される文法

〔1.1〕本来のmml2midの文法との上位互換性

  本mmlpp.plが解釈するMMLファイルの文法は、mml2midの完全な拡張になるよう
に作られています。つまり、mml2midの文法にきちんと従っているMMLファイルな
ら、それをmmlpp.plにかけた後mml2midで処理しても、mml2midだけで処理するの
と同じ結果が得られるはずです(そうならなければバグ)。


〔1.2〕長い名前のマクロの使用

  mml2midに比べ、マクロ定義行の文法が拡張されています。

	${マクロ名} マクロ定義

という行が書けます。マクロ名は、英数字と「_」からなる任意の名前です(大文
字小文字は区別されます)。また、定義されたマクロを使用する際にも

	${マクロ名}

という記述が使えます。
  例えば、次のMMLファイル

	${macro1} cde2
	A l4 ${macro1} ${macro1} gedc ded2

は、

	A l4 cde2 cde2 gedc ded2

に展開されます。
  特例として、マクロ名が英小文字1字だけ、あるいは数字1字+英小文字1字だけ
の場合は、マクロ名を囲む「{}」を略しても同じ意味になります(mml2mid自体の
 マクロの機能と同じ書き方になるわけです)。例えば

	${0a} cde2

と

	$0a cde2

は同じ意味です。マクロを使う時にも「${0a}」と「$0a」は同じ意味です。


〔1.3〕引数つきマクロの使用

  引数つきマクロを定義するには、マクロ定義の本体の中に「#番号」と書いて
おき、マクロを使用する時に「${マクロ名:引数1,引数2,…,引数n}」のように書
きます。すると、マクロ展開時に、「#i」に引数iが埋め込まれます。
  例えば、次のMMLファイル

	${macro1} [cg#1#2]4
	A l16 ${macro1:>c,d<} ${macro1:>e,<g}

は

	A l16 [cg>cd<]4 [cg>e<g]4

に展開されます。マクロmacro1の最初の呼び出しでは第1引数が「>c」で第2引数
が「d<」、2度目の呼び出しでは第1引数が「>e」で第2引数が「g<」になってお
り、これがマクロ展開時にそれぞれ「#1」「#2」の位置に埋め込まれたわけです。
  いくつか注意点があります。

  (1) 引数つきマクロを呼び出す際は、たとえマクロの名前が英小文字1字だけ、
あるいは数字1字+英小文字1字だけであっても、全体を「{ }」で囲んで下さい。
例えば

	${0a} [cg#1#2]4
	A l16 ${0a:>c,d<} ${0a:>e,<g}

の代わりに

	${0a} [cg#1#2]4
	A l16 $0a:>c,d< $0a:>e,<g

とは書けません。ただしマクロの定義行にはこの制限はないので、マクロの名前
が英小文字1字か数字1字+英小文字1字である場合の

	$0a [cg#1#2]4
	A l16 ${0a:>c,d<} ${0a:>e,<g}

はOKです。

  (2) 10個以上の引数を伴うマクロを定義する場合は、「#10」ではなく「#{10}」
のように引数の番号を「{ }」で囲んで下さい。「#10」だと、1番目の引数に0を
つなげたものと解釈されてしまいます。

  (3) マクロ呼び出し時に「,」を含む引数を指定したい場合、そのままでは「,」
が引数の区切りと解釈されてしまいますので、「\,」と指定して下さい。例えば

	$a FE3,#1,#2
	A E127 ${a:0,8\,-50\,2.\,50}

は、第1引数が「0」、第2引数が「8,-50,2.,50」ということになるので

	A E127 FE3,0,8,-50,2.,50

に展開されます。

  ただし、「{ }」を含む引数の場合、その中の「,」は「\,」と記述しなくても
大丈夫です。例えば

	$a EX x41,x10,x42,x12,#1,xf7
	A ${a:{x40,x01,x30,x00}}

の場合、第1引数は「{x40,x01,x30,x00}」になるため

	A EX x41,x10,x42,x12,{x40,x01,x30,x00},xf7

に展開されます。

  また、「\」を引数に含めたい場合も「\\」と記述して下さい(mml2mid.txtに
よると「\音長」命令はobsoleteですが)。一般に、マクロ呼び出し時の引数中の
『「\」+1文字』は、「\」が剥ぎ取られて、その次の文字そのものとして扱われ
ます(文字列内を除く)。

  (4) マクロの引数の個数のチェックは行っていません。例えば

	$a cde#1#2
	A ${a:f,g,a}

は、引数2個のマクロ定義に対し3個の引数を与えていますが、エラーにはならず、
第3引数は単に捨てられるだけです。逆に

	$a cde#1#2#3
	A ${a:f,g}

のように、引数3個のマクロ定義に対し2個しか引数を与えない場合もエラーは出
ず、「#3」には空の引数が埋められて「A cdefg」に展開されます。


〔1.4〕ピッチベンド値計算機能

  BS, FB, UBなどのコマンドで、ピッチベンド値を半音単位で指定できる機能で
す。mmlppbnd.txtを参照して下さい。


〔1.5〕注意事項

  [a] mmlpp.plはマクロ展開の他に、#includeの展開も本来のmml2midと同様に
行います。さもないと、includeされるファイルの中でのマクロ定義が効かない
からです。また、コメントの除去、継続行を1行につなげるなどの操作も、本来
のmml2midと同様に行います。

  [b] 同名のマクロが2度定義されていてもエラーにはならず、後の定義が有効
になります。
  また、マクロの使用はマクロの定義より先でも後でもかまいません。本来の
mml2midと異なり、マクロ定義の中でさらにマクロが使われている場合にも、マ
クロの定義が使用より後でもOKです。

  [c] 本来のmml2midでは、マクロ内のループの展開はマクロの定義時に行われ
ています。従って、mml2midではマクロ内のループはマクロ内で完結(繰り返し回
数も含めて)していなければなりません。例えば「cde」を4回繰り返すつもりで
誤って

	/* これはmml2midでは誤り */
	$a [cde]
	A $a4

と書くと、「[cde]」のループの展開はマクロの定義時に行われ(繰り返し回数が
略されているので2回繰り返しとなり)、$aの定義内容は「cdecde」となります。
従って、マクロの展開結果は「cdecde4」となり、意図と異なってしまいます。
  しかしmmlpp.plを使う場合は、マクロの展開が先に行われ、その後でmml2mid
がループの展開をします。従って、マクロの展開結果は「[cde]4」となり、
mml2midがループの展開を行って、正しい演奏が行われます。
  このように、マクロ内のループがマクロ内で完結している必要がなくなるわけ
です。

  [d] mml2midと同様に、文字列内ではたとえ「$」が現れてもマクロの展開は行
われません。例えば

	$a violin
	A C1"1st.$a" @40 cde

とかやっても「A C1"1st.violin" @40 cde」には展開されません。これに相当す
ることをしたければ、mml2midの文字列連接機能を使って下さい。例えば

	$a "violin"
	A C1"1st."+$a @40 cde

とすると「A C1"1st"+"violin" @40 cde」に展開され、mml2midが文字列を連接
して「1st.violin」をトラック名に設定します。


【2】mmlpp.plの使用法

  mmlpp.plの使い方は

	perl mmlpp.pl MMLファイル	
	  あるいは
	perl mmlpp.pl

です。ファイル名引数を複数書くことはできません。ファイル名を与えなかった
場合は標準入力を読みます。また、出力は標準出力に出ますので、それをファイ
ルに格納したい場合は

	perl mmlpp.pl MMLファイル > 出力先

のようにリダイレクトして下さい。
  念のため書いておきますと、mmlppはあくまでプリプロセッサですので、MIDI
ファイルの作成をしたければ、mmlppの出力をファイルに格納したうえで、その
ファイルを改めてmml2midでコンパイルして下さい。

  文字列に日本語を含むMMLファイルの場合は、jperlを用意して

	jperl -Leuc mmlpp.pl MMLファイル > 出力先	(日本語EUCの場合)
	jperl -Lsjis mmlpp.pl MMLファイル > 出力先	(MS漢字コードの場合)

として下さい。非日本語perlだと「表」とか「ソ」とかが文字列内に現れた場合
に正常に処理できない場合があります。
  但し、jperlのデフォルトの文字コードと同じ場合には「-Leuc」または
「-Lsjis」は省略できます。例えばDOSの場合、配布されているjperlはデフォル
トがMS漢字コードでしょうから、MS漢字コードのMMLファイルを処理するなら

	jperl mmlpp.pl MMLファイル > 出力先

で足ります。

  DOSでは以下のバッチを作っておくと便利かも知れません。

	@echo off
	jperl mmlpp.pl %1 > tmp.mml
	mml2mid tmp.mml %2 %3 %4 %5 %6 %7 %8 %9
	del tmp.mml

このバッチの名前をmml2midx.batだとして、例えば

	C:\> mml2midx a.mml a.mid -f -t1 -x

のようにすると、a.mmlをmmlpp.plで処理してmml2midでコンパイル(format0で出
力、半音分移調、「>」と「<」を入れ換え)し、結果をa.midに入れます。

  mmlpp.plを単独のコマンドにしたい(つまり、perlと明示的に打たなくても
「mmlpp MMLファイル名」でいけるようにしたい)場合、DOSでは「SOS」(ftp:
//ftp.ics.nara-wu.ac.jp/pub/nide/dosutil/sos110d.tgz)の利用を検討して下
さい。UNIXの場合は述べるまでもないでしょう。


【3】更新履歴
  99/7/26 v1.00
      ・初版
  00/6/18 v1.01
      ・#includeするファイル名中に「\v」がある場合と、「\x」があってその
	次の16進数のa〜fが大文字で記述されている場合に、mml2midと異なる
	解釈をしていたのを訂正
  01/1/20 v1.02
      ・メモル(吉村隆則)さんによるピッチベンド値計算機能付加。
